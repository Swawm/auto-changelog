Вопрос 1. Для каких репозиториев применим данный инструмент?

Ответ:

Для репозиториев, участники которого используют общепринятый стиль описания коммитов.
(https://www.conventionalcommits.org/en/v1.0.0/)

Вопрос 2. Как влияет опция - - latest-version на алгоритм выбора коммитов в changelog ?

Ответ:

По умолчанию алгоритм выбирает последний коммит той ветки, на которой находится пользователь, если он явно не указал
обратное.

Вопрос 3. Тест test_option_output проверяет, что ченджлог сохраняется в файл с именем, заданным опцией (output).
Чтение файла для проверки (стр.133) не отличается от чтения в предыдущем тесте (стр. 120),
где имя файла стандартное. Прокомментируйте, почему тест успешен?


Ответ:

Чтение файла (changelog = open_changelog().read()) не отличается, потому что функция open_changelog
принимает параметр changelog_name, который передается явно в тесте (a.out).
При этом функция changelog_name, которая передается в качестве параметра в open_changelog,
по умолчанию возвращает строку "CHANGELOG.md" (~46-47 строка в integration_text.py).
Поэтому проверки и не отличаются, поскольку если мы явно передаем имя файла, то оно заменяет возвращаемое значение
функции по умолчанию и не влияет никак на проверку файла.




Задание 1.
Предложите, по-крайней мере, ещё два теста на работу ченджлоггера (модуль integration_test.py)


Ответ:

test_cyrillic_commit_message() и test_commit_ammend_message()

Тест-кейс 1: Проверка отображения кириллицы в чейнджлоге.

Шаги воспроизведения:

1. Подготовить в окружении пустой коммит с сообщением на кириллице.

(Пример: "feat(api): Это сообщение написано на кириллице")

2. Сгенерировать файл чейнджлога.
3. Проверить содержимое файла

Ожидаемый результат: в файле будет отображен текст на кириллице.


Тест-кейс 2: Проверка отображения коммита в чейджлоге после --amend.

Шаги воспроизведения:

1. Подготовить в окружении два коммита с общепринятым стилем описания.

(Пример:    'git commit --allow-empty -m "feat(api): Add file #2"',
            'git commit --allow-empty -m "feat: Add file #1"')

2. Добавить третий коммит с флагом --amend, который не соответствует общепринятому стилю описания коммитов.

(Пример:    'git commit --allow-empty --amend -m "New commit message instead of add file #1, that will not be shown '
            'in changelog"')

3. Сгенерировать файл чейнджлога.
4. Проверить содержимое файла

Ожидаемый результат: в файле будет отображен только 1 коммит, который не подвергся изменениям
(в этом случае feat(api): Add file #2").




Задание 2: Исправьте код так, чтобы поддержать синтаксис коммитов
с обязательным указанием контекста в скобках. Пример: ‘fix(app)’


Ответ:

См. diff с master, флаг --scope


Задание 3: Добавить в  ченджлоггер возможность игнорировать коммиты,
если сообщение содержит заданные ключевые слова.
Список слов для поиска в сообщении задаётся через запятую при помощи дополнительной опции командной строки при запуске.
Пример вызова:
runner.invoke(main, [«—ignore", «OMG,merge,attempt #"])

Ответ:

См. diff с master , флаг -i / --ignore